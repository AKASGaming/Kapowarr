{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kapowarr Docs","text":"<p>Kapowarr is a software to build and manage a comic book library, fitting in the *arr suite of software.</p> <p>Please note the docs are maintained by MrCas and the Kapowarr team. As the software is constantly changing, the docs may not be completely up-to-date. Bear with us. </p> <p>Getting started:</p> <ul> <li>Installation</li> <li>Setup After Installation</li> </ul> <p>General Information:</p> <ul> <li>FAQ</li> <li>API Docs</li> </ul>"},{"location":"#workings","title":"Workings","text":"<p>Kapowarr allows you to build a digital library of comics. You can add volumes, map them to a folder and start managing! Download issues of the volume (or TPB's), rename them and move them. The whole process is automated and is all customizable in the settings.</p> <p>Each day, each volume is checked to see if a new issue has come out and if so, it will immediately be downloaded and added to your library.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Get loads of metadata about the volumes and issues in your library</li> <li>Run a \"Search Monitored\" to download whole volumes with one click</li> <li>Or use \"Manual Search\" to decide yourself what to download</li> <li>Support for downloading directly from servers, via MediaFire and Mega</li> <li>Downloaded files automatically get moved wherever you want and renamed in the format you desire</li> <li>Zip files can be extracted and it's contents renamed after downloading or with a single click</li> <li>The recognizable UI from the *arr suite of software</li> </ul>"},{"location":"#contact","title":"Contact","text":"<ul> <li>For support, a discord server is available</li> <li>Alternatively, make an issue</li> </ul>"},{"location":"api/","title":"API documentation","text":""},{"location":"api/#coming-soon","title":"Coming Soon","text":""},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#does-kapowarr-support-xyz","title":"Does Kapowarr support XYZ?","text":"<p>\"XYZ\" can be \"Magazines\" or \"Manga\" or something else. For now, there is a simple answer: if it can be found on ComicVine, you can add it to Kapowarr (and use features like renaming and unzipping). If getcomics offers downloads for it, you can also download for it.</p>"},{"location":"faq/#when-will-xyz-be-added","title":"When will XYZ be added?","text":"<p>\"XYZ\" can be \"Library Import\" or \"Exporting metadata\" or something else. First, check out the project board to see if it's already on there and if so, at what stage it is. If it's not, check if a feature request is already made for it on the issues page and otherwise make a feature request for it there.</p>"},{"location":"faq/#kapowarr-unable-to-open-database-file","title":"Kapowarr unable to open database file","text":"<p>If using Kapowarr with a mapped folder for the app-db rather than a docker volume, then Kapowarr will need to have permission on the folder being mapped in order to function. The simplest way to achieve this is to give read, write, and execute permissions on the folder ('rwx'), and change ownership of the folder to the user that runs the docker container (usually user 1000).  </p> <p>This can be achieved by running <code>chown 1000 /mapped/folder</code> to set the ownership, and <code>chmod 770 /mapped/folder</code> to set the permissions. If you are mapping in <code>/opt/kapowarr/</code> (as in our installation example), these commands would be <code>chown 1000 /opt/kapowarr/</code> and <code>chmod 770 /opt/kapowarr</code>, respectively.</p> <p>If you are using an alternate folder, or an alternate user, switch out the relevant detail in the examples.</p>"},{"location":"installation/","title":"Installation","text":"<p>The recommended way to install Kapowarr is using Docker. After installing Kapowarr, it is advised to read the Setup After Installation page.</p>"},{"location":"installation/#docker","title":"Docker","text":""},{"location":"installation/#create-volume-or-folder","title":"Create volume or folder","text":"<p>Kapowarr needs some permanent place to put the database file. This can be a docker volume, or a folder on the host machine.</p> Docker VolumeLocal Folder <p>Both of these options will create a named volume that you can then use when launching the container.</p> Docker CLIPortainer <pre><code>docker volume create kapowarr-db\n</code></pre> <ul> <li>Open <code>Volumes</code></li> <li>Click <code>Add Volume</code></li> <li>Enter name matching the one you'll use in compose (<code>kapowarr-db</code>, in the above example)</li> <li>Click <code>Create the volume</code></li> <li>Open <code>Stacks</code></li> <li>Create the stack with the named volume in it.</li> </ul> <p>If you'd prefer to use a local folder on the host machine for storing config, Linux standards would suggest putting that in <code>/opt/application_name</code>, as the <code>/opt</code> directory is where program options should be stored. In this case, you'd create the desired folder with something like <code>mkdir /opt/Kapowarr/db</code>, and replace 'kapowarr-db:/app/db' with '/opt/Kapowarr/db:/app/db'. Note, the permissions on this folder need to allow the container to read, write, and execute inside it. See the note in the FAQ for more info.</p>"},{"location":"installation/#launch-container","title":"Launch container","text":"<p>Now that the database file can be stored somewhere, we can launch the container.</p> Docker CLIDocker Compose <p>The command to get the docker container running can be found below: <pre><code>docker run -d \\\n--name kapowarr \\\n-v kapowarr-db:/app/db \\\n-v /path/to/download_folder:/app/temp_downloads \\\n-v /path/to/root_folder:/comics-1 \\\n-p 5656:5656\n    mrcas/kapowarr:latest\n</code></pre></p> <p>The contents of the docker-compose.yml file would look like this: <pre><code>version: '3.3'\nservices:\nkapowarr:\ncontainer_name: kapowarr\nvolumes:\n- 'kapowarr-db:/app/db'\n- '/path/to/download_folder:/app/temp_downloads'\n- '/path/to/root_folder:/comics-1'\nports:\n- '5656:5656'\nimage: 'mrcas/kapowarr:latest'\n</code></pre></p> <p>A few important notes about the command/file before launching the container:</p> <ol> <li>If you're using a folder on the host machine instead of a docker volume to store the database file, replace <code>kapowarr-db</code> with the path to the host folder. E.g. <code>/opt/Kapowarr/db:/app/db</code>.</li> <li>Replace <code>/path/to/download_folder</code> with the path to your desired download folder on the host machine. Everything is downloaded to this folder and when completed, moved out of to their final destination. It's smart to set this on a disk that can sustain more writes than normal. Ideally something like a non-network mounted ssd, but pretty much everything will suffice.</li> <li>Replace <code>/path/to/root_folder</code> with the path to your desired root folder on the host machine. Then, this folder will get mapped to <code>/comics-1</code> inside the docker container. When adding a root folder in Kapowarr, you'll then set it's location as <code>/comics-1</code>, mapping it this way to where ever <code>/path/to/root_folder</code> may point.</li> <li>You can map multiple root folders by repeating <code>-v /path/to/root_folder:/comics-1</code> for the Docker CLI command or <code>- /path/to/root_folder:/comics-1</code> for the Docker Compose file, but then supplying different values for <code>/path/to/root_folder</code> and <code>/comics-1</code>. E.g. <code>-v /media/Comics-2:/comics-2</code> for the Docker CLI command or <code>- /media/Comics-2:/comics-2</code> for the Docker Compose file, then add <code>/comics-2</code> as your second root folder in Kapowarr.</li> <li>Information on how to change the port can be found on the Setup After Installation page.</li> </ol>"},{"location":"installation/#docker-example","title":"Docker example","text":"Docker CLIDocker Compose <pre><code>docker run -d \\\n--name kapowarr \\\n-v kapowarr-db:/app/db \\\n-v /home/cas/media/Downloads:/app/temp_downloads \\\n-v /home/cas/media/Comics:/comics-1 \\\n-v /home/cas/other_media/Comics-2:/comics-2 \\\n-p 5656:5656\n    mrcas/kapowarr:latest\n</code></pre> <pre><code>version: '3.3'\nservices:\nkapowarr:\ncontainer_name: kapowarr\nvolumes:\n- 'kapowarr-db:/app/db'\n- '/home/cas/media/Downloads:/app/temp_downloads'\n- '/home/cas/media/Comics:/RF'\n- '/home/cas/media/Comics-2:/RF-2'\nports:\n- '5656:5656'\nimage: 'mrcas/kapowarr:latest'\n</code></pre> <p>In this example, we use a Docker volume as the place to store the database file, set <code>/home/cas/media/Downloads</code> as the download folder and we map the folder <code>/home/cas/media/Comics</code> to <code>/comics-1</code> and <code>/home/cas/other_media/Comics-2</code> to <code>/comics-2</code>. In Kapowarr, you'd then add <code>/comics-1</code> and <code>/comics-2</code> as root folders.</p>"},{"location":"installation/#manual-install","title":"Manual Install","text":"<p>Coming soon</p>"},{"location":"rate_limiting/","title":"Rate limiting","text":"<p>This page covers how Kapowarr handles with the rate limits of services it uses.</p>"},{"location":"rate_limiting/#comicvine","title":"ComicVine","text":"<p>Hourly, Kapowarr finds the volumes that haven't had a metadata fetch for more than a day. It tries to fetch for as many volumes as possible. If it can't fetch for them all in one go, the ones that didn't get fetched, get preference the next hour.</p> <p>With this setup, all volumes (unless you have an absurdly big library) get updated every day and as little as possible requests are made. When we still surpass the limit, the volumes that need to be fetched the most (the ones that haven't been updated for the longest) get preference to ensure that they \"keep up\". Kapowarr can update at most 25.000 volumes and 25.000 issues per hour.</p>"},{"location":"rate_limiting/#mega","title":"Mega","text":"<p>If a Mega download reaches the rate limit of the account mid-download (no way to calculate this beforehand), the download is canceled and all other Mega downloads in the download queue are removed. From that point on, Mega downloads are skipped until we can download from it again. Alternative services like MediaFire and GetComics are used instead of Mega while we wait for the limit to go down again. If you have a Mega account that offers higher limits, it's advised to add it at Settings -&gt; Download -&gt; Credentials, so that Kapowarr can take advantage of it.</p>"},{"location":"setup_after_installation/","title":"Setup after installation","text":"<p>After installing Kapowarr, you should have access to the web-ui. Kapowarr needs some configuration in order for it to work properly.</p>"},{"location":"setup_after_installation/#port","title":"Port","text":"<p>The first thing to do is decide if you want to leave Kapowarr on the default port of 5656. If you do, you can go to the next step. If you want to change the port, continue reading.</p> Docker CLIDocker ComposeManual Install <p>Alter the command to run the container and replace <code>-p 5656:5656</code> with <code>-p {PORT}:5656</code>, where <code>{PORT}</code> is the desired port (e.g. <code>-p 8009:5656</code>). Then run the container with the new version of the command.</p> <p>Alter the file to run the container and replace <code>- 5656:5656</code> with <code>- {PORT}:5656</code>, where <code>{PORT}</code> is the desired port (e.g. <code>- 8009:5656</code>). Then run the container with the new version of the file.</p> <p>Edit the port number at Settings -&gt; General -&gt; Host -&gt; Port Number in the web-ui and change the value to the desired port. Then, restart Kapowarr.</p>"},{"location":"setup_after_installation/#authentication","title":"Authentication","text":"<p>You might want to set a password to restrict access to the web-ui (and API). Setting a password is optional. A password can be set at Settings -&gt; General -&gt; Security -&gt; Login Password. Don't forget to save. From then on, it is required to enter a password in order to gain access to the web-ui (and the API). If you want to disable the password, set an empty value for the setting and save.</p>"},{"location":"setup_after_installation/#comicvine-api-key","title":"ComicVine API key","text":"<p>Kapowarr uses ComicVine as it's metadata source. To fetch the metadata from ComicVine, Kapowarr needs access to the API, which requires an API key.</p> <ol> <li>Go to the API page of ComicVine.</li> <li>If you don't have a free account at ComicVine already, sign up and once logged in, revisit the linked page.</li> <li>You'll see your ComicVine API key, which is 40 characters long and contains the letters a-f and numbers 0-9 (e.g. <code>da39a3ee5e6b4b0d3255bfef95601890afd80709</code>).</li> <li>Copy that API key and enter it as the value of Settings -&gt; General -&gt; Comic Vine API -&gt; Comic Vine API Key in the web-ui. Don't forget to save.</li> </ol> <p>On the documentation page about rate limiting, information can be found about the handling of the ComicVine API rate limit.</p>"},{"location":"setup_after_installation/#root-folders","title":"Root Folders","text":"<p>Root folders are the base folders that Kapowarr works in. All content is put in these folders. When adding a volume (or when editing one), you choose in which root folder all content for that volume is put. Kapowarr will never touch any files outside the root folders (except in the download folder). You might have multiple root folders because you store your comics on multiple drives or want different access rights to certain volumes, to name a few reasons.</p> <p>Root folders can be added at Settings -&gt; Media Management -&gt; Root Folders. Note: If you use docker to run Kapowarr and have followed the example given in the installation instructions, this is where you would enter <code>/comics-1</code> and <code>/comics-2</code>.</p>"},{"location":"setup_after_installation/#downloading","title":"Downloading","text":"<p>One of Kapowarr's biggest features is being able to download comics. The Settings -&gt; Download section has all settings regarding the downloading.</p>"},{"location":"setup_after_installation/#download-folder","title":"Download folder","text":"<p>The download folder (Settings -&gt; Download -&gt; Download Location -&gt; Direct Download Temporary Folder) is where all downloads are downloaded to, before they get moved to their final destination. If you run Kapowarr using Docker, leave this setting to it's default value of <code>/app/temp_downloads</code> and instead change the value of <code>/path/to/download_folder</code> in the Docker command (reference). If you have a manual install, you can change this value to whatever you want. It is allowed to be outside your root folders.</p>"},{"location":"setup_after_installation/#service-preference","title":"Service preference","text":"<p>Kapowarr has the ability to download directly from servers, but also to download from services like MediaFire and Mega. Websites like getcomics.org offer the same download via multiple services (multiple download links to download the same file, via different services). This settings determines what preference you have for each service. If multiple services are offered for the same download, Kapowarr will use this preference list to determine what service to pick (if the link of the top service doesn't work, Kapowarr falls back to the other options, in order). If you have an account for one of these services (see Credentials setting), you might want to put that one at the top, to make Kapowarr take advantage of the extra features that the account offers (extra bandwidth, higher rate limit, etc.).</p>"},{"location":"setup_after_installation/#credentials","title":"Credentials","text":"<p>Kapowarr has the ability to download from services like MediaFire and Mega. These services apply limits to how much you can download per day, or a download speed limit. An (paid) account for one of these services often offers higher limits. Kapowarr can take advantage of these extra features that these accounts offer. Under the credentials section, you can add credentials of accounts, which Kapowarr will use when downloading, taking advantage of the extra features.</p>"},{"location":"setup_after_installation/#building-up-a-library","title":"Building up a library","text":"<p>Now you're ready to build a library. At Volumes -&gt; Add Volume, you can search for volumes and add them to your library. Once you add one, a folder is automatically created for the volume in the root folder selected (see Settings -&gt; Media Management -&gt; File Naming -&gt; Volume Folder Naming). Then you can start downloading content for the volume, and all files will be put in this volume folder. The naming of the files follows the format set in the settings (see Settings -&gt; Media Management -&gt; File Naming).</p>"},{"location":"setup_after_installation/#importing-a-library","title":"Importing a library","text":"<p>Importing an already existing library into Kapowarr is currently not very fluid (the \"Library Import\" feature found in Radarr/Sonarr is not yet implemented in Kapowarr). The currently advised way to get Kapowarr working with your current library:</p> <ol> <li>Move all current media into the root folder, where each volume has their own folder.</li> <li>Add a volume in Kapowarr and while adding, set the \"Volume Folder\" to the folder of the volume from step 1.</li> <li>Go to the volume in Kapowarr and click the \"Refresh &amp; Scan\" button. Kapowarr will scan the volume folder and import all files.</li> <li>Refresh the web-ui.</li> <li>(Optional) Click \"Preview Rename\" and Kapowarr will immediately propose new naming for the files, following the file naming format set in the settings.</li> <li>Repeat for all volumes that you have in your current library.</li> </ol> <p>There are plans to add support for the \"Library Import\" feature, to make the process of importing an existing library easier.</p>"}]}